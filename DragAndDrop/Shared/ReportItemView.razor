@using DragAndDrop.Models
@using DragAndDrop.Utils
@inject IJSRuntime JSRuntime

<div id="@Item.UniqueId" @ref="elementRef" class="@GetContainerClass(Item) drop-zone" style="@GetItemStyle()">
    <div class="@GetContentClass(Item)">
        @if(Item.HasChilds)
        {
            // Agrupar los elementos hijos por RowNumber
            var groupedByRow = Item.Items
            .OrderBy(r => r.Position.RowNumber)
            .ThenBy(c => c.Position.ColumnNumber)
            .GroupBy(r => r.Position.RowNumber);

            @foreach(var rowGroup in groupedByRow)
            {
                <div class="row-content">
                    @foreach(var child in rowGroup)
                    {
                        <ReportItemView Item="child" OnDeleteItemRequest="OnDeleteItemRequest" />
                    }
                </div>
            }
        }
        else
        {
            <div class="col-content">
                <div class="item-header">
                    <small>@Item.Name (@Item.Visualization, Fila: @Item.Position.RowNumber, Columna: @Item.Position.ColumnNumber)</small>
                    <button class="delete-btn" title="Eliminar este elemento" @onclick="() => OnDeleteItemRequest.InvokeAsync(Item)">×</button>
                </div>
                <div class="item-content-placeholder">
                    <span>Arrastra aquí para añadir una columna</span>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public TemplateExecutionModel Item { get; set; } = null!;
    [Parameter] public EventCallback<TemplateExecutionModel> OnDeleteItemRequest { get; set; }
    private ElementReference elementRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Ahora cada item es tanto una zona de drop como un elemento arrastrable
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("makeDropZone", elementRef);

            // El dato que se arrastra es de tipo 'Item'
            var dragData = new { DragType = "Item", ItemId = Item.UniqueId.ToString() };
            await JSRuntime.InvokeVoidAsync("makeDraggable", elementRef, dragData);
        }
    }

    private string GetContainerClass(TemplateExecutionModel item) => (item.Items?.Any() ?? false) ? "report-row" : "report-col";
    private string GetContentClass(TemplateExecutionModel item) => (item.Items?.Any() ?? false) ? "col-content" : "row-content";
    private string GetItemStyle()
    {
        var color = ColorHelper.GetColorForVisualization(Item.Visualization);
        var bgColor = ColorHelper.GetColorForVisualization(Item.Visualization, 0.08);
        return $"border-color: {color}; background-color: {bgColor};";
    }
}