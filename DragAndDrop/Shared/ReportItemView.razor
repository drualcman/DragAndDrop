@using DragAndDrop.Models
@using DragAndDrop.Utils
@inject IJSRuntime JSRuntime

<div id="@Item.UniqueId" @ref="elementRef" class="@GetContainerClass(Item) drop-zone" style="@GetItemStyle()">
    <div class="item-header">
        <small>@Item.Name (@Item.Visualization)</small>
        <button class="delete-btn" title="Eliminar este elemento" @onclick="() => OnDeleteItemRequest.InvokeAsync(Item.UniqueId)">×</button>
    </div>
    <div class="@GetContentClass(Item)">
        @if(Item.HasChilds)
        {
            @foreach(var child in Item.Items)
            {
                // Propagar el evento de eliminación hacia los hijos
                <ReportItemView Item="child" OnDeleteItemRequest="OnDeleteItemRequest" />
            }
        }
        else
        {
            <div class="item-content-placeholder">
                @if(Item.Visualization != VisualizationType.Empty)
                {
                    <span>@Item.Visualization</span>
                }
                else
                {
                    <span>Arrastra aquí para añadir una columna</span>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public TemplateExecutionModel Item { get; set; } = null!;
    [Parameter] public EventCallback<Guid> OnDeleteItemRequest { get; set; }
    private ElementReference elementRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JSRuntime.InvokeVoidAsync("makeDropZone", elementRef);
        }
    }

    private string GetContainerClass(TemplateExecutionModel item)
    {
        return item.Visualization == VisualizationType.Empty ? "report-row" : "report-col";
    }

    private string GetContentClass(TemplateExecutionModel item)
    {
        return item.Visualization == VisualizationType.Empty ? "row-content" : "col-content";
    }

    private string GetItemStyle()
    {
        var color = ColorHelper.GetColorForVisualization(Item.Visualization);
        var bgColor = ColorHelper.GetColorForVisualization(Item.Visualization, 0.08);
        return $"border-color: {color}; background-color: {bgColor};";
    }
}