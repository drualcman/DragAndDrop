@page "/"
@using DragAndDrop.Models
@using DragAndDrop.Shared
@using DragAndDrop.Utils
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="report-builder-container">
    <!-- Paleta de Herramientas -->
    <div class="toolbox">
        <h4>Herramientas</h4>
        @foreach(var vizType in Enum.GetValues<VisualizationType>())
        {
            <div id="tool-@vizType" class="tool-item" @ref="toolElements[vizType]"
                 style="background-color: @ColorHelper.GetColorForVisualization(vizType, 0.1); border: 1px solid @ColorHelper.GetColorForVisualization(vizType);">
                @vizType.ToString()
            </div>
        }
        <hr />
        <button class="btn btn-danger mt-3 w-100" @onclick="ClearReport">Limpiar Reporte</button>
    </div>

    <!-- Lienzo del Reporte -->
    <div class="report-canvas-wrapper">
        <div id="main-canvas" class="report-canvas drop-zone" @ref="dropZoneElement">
            @if(!reportRows.Any())
            {
                <div class="empty-canvas-message">Arrastra una herramienta aquí para comenzar</div>
            }
            @foreach(var row in reportRows)
            {
                <ReportItemView Item="row" OnDeleteItemRequest="HandleDeleteItem" />
            }
        </div>
    </div>
</div>

@code {
    private List<TemplateExecutionModel> reportRows = new();
    private DotNetObjectReference<Home>? dotNetRef;
    private Dictionary<VisualizationType, ElementReference> toolElements = new();
    private ElementReference dropZoneElement;

    protected override void OnInitialized()
    {
        foreach(var vizType in Enum.GetValues<VisualizationType>().Where(v => v != VisualizationType.Empty))
        {
            toolElements[vizType] = new ElementReference();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorDragDrop.setDotNetHelper", dotNetRef);

            foreach(var (vizType, element) in toolElements)
            {
                var dragData = new { DragType = "Tool", Type = vizType.ToString() };
                await JSRuntime.InvokeVoidAsync("makeDraggable", element, dragData);
            }

            await JSRuntime.InvokeVoidAsync("makeDropZone", dropZoneElement);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void HandleDrop(object droppedDataObject, string targetId, string dropPosition)
    {
        var droppedData = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(droppedDataObject.ToString());
        string dragType = droppedData.GetProperty("dragType").GetString() ?? "";

        if(dragType == "Tool")
        {
            HandleNewToolDrop(droppedData.GetProperty("type").GetString() ?? "", targetId, dropPosition);
        }
        else if(dragType == "Item")
        {
            HandleMoveItemDrop(Guid.Parse(droppedData.GetProperty("itemId").GetString() ?? ""), Guid.Parse(targetId), dropPosition);
        }
        StateHasChanged();
    }

    private void HandleNewToolDrop(string vizTypeString, string targetId, string dropPosition)
    {
        Enum.TryParse(vizTypeString, out VisualizationType vizType);
        var newItem = new TemplateExecutionModel { Visualization = vizType, Name = vizType.ToString() };

        if(targetId == "main-canvas")
        {
            var newRow = new TemplateExecutionModel { Visualization = VisualizationType.Empty, Name = "Nueva Fila" };
            newRow.Items.Add(newItem);
            reportRows.Add(newRow);
            return;
        }

        var targetItem = FindItemById(Guid.Parse(targetId));
        if(targetItem == null)
        {
            Console.WriteLine($"No se encontró el elemento objetivo con ID {targetId}");
            return;
        }

        InsertItem(newItem, targetItem, dropPosition);
    }

    private void HandleMoveItemDrop(Guid sourceId, Guid targetId, string dropPosition)
    {
        var sourceItem = FindItemById(sourceId);
        var targetItem = FindItemById(targetId);

        if(sourceItem == null || targetItem == null || sourceId == targetId || IsDescendant(sourceItem, targetId))
        {
            Console.WriteLine($"No se puede mover el item. Source: {sourceId}, Target: {targetId}");
            return;
        }

        var parent = sourceItem.Parent;
        if(parent != null)
        {
            parent.Items.Remove(sourceItem);
            Console.WriteLine($"Eliminado item {sourceItem.Name} (ID: {sourceItem.UniqueId}) del padre {parent.Name} (ID: {parent.UniqueId})");
            CleanupEmptyParent(parent);
        }
        else
        {
            reportRows.Remove(sourceItem);
            Console.WriteLine($"Eliminado item raíz {sourceItem.Name} (ID: {sourceItem.UniqueId}) de reportRows");
        }

        InsertItem(sourceItem, targetItem, dropPosition);
    }

    private void InsertItem(TemplateExecutionModel itemToInsert, TemplateExecutionModel targetItem, string dropPosition)
    {
        if(dropPosition == "Left" || dropPosition == "Right")
        {
            var parent = targetItem.Parent;
            if(parent == null)
            {
                Console.WriteLine($"No se puede insertar en {dropPosition}: el objetivo no tiene padre");
                return;
            }

            var index = parent.Items.IndexOf(targetItem);
            if(index == -1)
            {
                Console.WriteLine($"No se encontró el objetivo en la colección del padre");
                return;
            }

            itemToInsert.Position.RowNumber = targetItem.Position.RowNumber;

            if(dropPosition == "Right")
            {
                itemToInsert.Position.ColumnNumber = targetItem.Position.ColumnNumber + 1;
                index++;
                foreach(var sibling in parent.Items.Skip(index))
                {
                    if(sibling.Position.RowNumber == targetItem.Position.RowNumber)
                    {
                        sibling.Position.ColumnNumber++;
                    }
                }
            }
            else
            {
                itemToInsert.Position.ColumnNumber = targetItem.Position.ColumnNumber;
                foreach(var sibling in parent.Items.Where(x =>
                    x.Position.RowNumber == targetItem.Position.RowNumber &&
                    x.Position.ColumnNumber >= targetItem.Position.ColumnNumber))
                {
                    sibling.Position.ColumnNumber++;
                }
            }

            parent.Items.Insert(index, itemToInsert);
            Console.WriteLine($"Insertado item {itemToInsert.Name} (ID: {itemToInsert.UniqueId}) en {dropPosition} del objetivo {targetItem.Name} (ID: {targetItem.UniqueId})");
        }
        else if(dropPosition == "Top" || dropPosition == "Bottom")
        {
            var containerParent = targetItem.Parent;
            if(containerParent != null)
            {
                var index = containerParent.Items.IndexOf(targetItem);
                if(index == -1)
                {
                    Console.WriteLine($"No se encontró el objetivo en la colección del padre");
                    return;
                }

                if(dropPosition == "Top")
                {
                    itemToInsert.Position.RowNumber = targetItem.Position.RowNumber;
                    foreach(var sibling in containerParent.Items.Where(x =>
                        x.Position.RowNumber >= targetItem.Position.RowNumber))
                    {
                        sibling.Position.RowNumber++;
                    }
                }
                else
                {
                    itemToInsert.Position.RowNumber = targetItem.Position.RowNumber + 1;
                    foreach(var sibling in containerParent.Items.Where(x =>
                        x.Position.RowNumber > targetItem.Position.RowNumber))
                    {
                        sibling.Position.RowNumber++;
                    }
                    index++;
                }

                containerParent.Items.Insert(index, itemToInsert);
                Console.WriteLine($"Insertado item {itemToInsert.Name} (ID: {itemToInsert.UniqueId}) en {dropPosition} del objetivo {targetItem.Name} (ID: {targetItem.UniqueId})");
            }
            else
            {
                var index = reportRows.IndexOf(targetItem);
                if(index == -1)
                {
                    Console.WriteLine($"No se encontró el objetivo en reportRows");
                    return;
                }

                if(dropPosition == "Top")
                {
                    itemToInsert.Position.RowNumber = targetItem.Position.RowNumber;
                    foreach(var row in reportRows.Where(r =>
                        r.Position.RowNumber >= targetItem.Position.RowNumber))
                    {
                        row.Position.RowNumber++;
                    }
                }
                else
                {
                    itemToInsert.Position.RowNumber = targetItem.Position.RowNumber + 1;
                    foreach(var row in reportRows.Where(r =>
                        r.Position.RowNumber > targetItem.Position.RowNumber))
                    {
                        row.Position.RowNumber++;
                    }
                    index++;
                }

                reportRows.Insert(index, itemToInsert);
                Console.WriteLine($"Insertado item raíz {itemToInsert.Name} (ID: {itemToInsert.UniqueId}) en {dropPosition} del objetivo {targetItem.Name} (ID: {targetItem.UniqueId})");
            }
        }
        else if(dropPosition == "Center")
        {
            if(targetItem.Visualization == VisualizationType.Empty)
            {
                itemToInsert.Position.RowNumber = targetItem.Position.RowNumber;
                itemToInsert.Position.ColumnNumber = targetItem.Items.Count + 1;
            }
            targetItem.Items.Add(itemToInsert);
            Console.WriteLine($"Insertado item {itemToInsert.Name} (ID: {itemToInsert.UniqueId}) como hijo de {targetItem.Name} (ID: {targetItem.UniqueId})");
        }
    }

    private HashSet<Guid> processedIds = new();

    private void HandleDeleteItem(TemplateExecutionModel item)
    {
        if(processedIds.Contains(item.UniqueId))
        {
            Console.WriteLine($"El item {item.Name} (ID: {item.UniqueId}) ya está siendo procesado, evitando recursión");
            return;
        }

        processedIds.Add(item.UniqueId);
        var itemToDelete = FindItemById(item.UniqueId);
        if(itemToDelete == null)
        {
            Console.WriteLine($"No se encontró el elemento con ID {item.UniqueId}");
            processedIds.Remove(item.UniqueId);
            return;
        }

        if(itemToDelete.Parent != null)
        {
            var parent = itemToDelete.Parent;
            Console.WriteLine($"Eliminando item {itemToDelete.Name} (ID: {itemToDelete.UniqueId}) del padre {parent.Name} (ID: {parent.UniqueId}, Hijos antes: {parent.Items.Count})");
            parent.Items.Remove(itemToDelete);
            Console.WriteLine($"Padre {parent.Name} (ID: {parent.UniqueId}) ahora tiene {parent.Items.Count} hijos");
            CleanupEmptyParent(parent);
        }
        else if(!itemToDelete.HasChilds)
        {
            Console.WriteLine($"Eliminando fila raíz {itemToDelete.Name} (ID: {itemToDelete.UniqueId}) de reportRows");
            reportRows.Remove(itemToDelete);
        }
        else
        {
            Console.WriteLine($"No se elimina la fila raíz {itemToDelete.Name} (ID: {itemToDelete.UniqueId}) porque tiene hijos ({itemToDelete.Items.Count})");
            reportRows.Remove(item);
        }
        processedIds.Remove(item.UniqueId);
        StateHasChanged();
    }

    private void CleanupEmptyParent(TemplateExecutionModel? parent)
    {
        if(parent != null)
        {
            Console.WriteLine($"Verificando padre {parent.Name} (ID: {parent.UniqueId}, Hijos: {parent.Items.Count}, Tipo: {parent.Visualization})");
            // No eliminamos el padre, incluso si no tiene hijos, para permitir añadir nuevos hijos más tarde
        }
    }

    private TemplateExecutionModel? FindItemById(Guid id)
    {
        foreach(var row in reportRows)
        {
            var found = FindInNode(row, id);
            if(found != null)
                return found;
        }
        Console.WriteLine($"No se encontró el elemento con ID {id} en la estructura");
        return null;
    }

    private TemplateExecutionModel? FindInNode(TemplateExecutionModel node, Guid id)
    {
        if(node.UniqueId == id)
            return node;
        foreach(var child in node.Items)
        {
            var found = FindInNode(child, id);
            if(found != null)
                return found;
        }
        return null;
    }

    private bool IsDescendant(TemplateExecutionModel node, Guid idToFind)
    {
        return node.Items.Any(child => child.UniqueId == idToFind || IsDescendant(child, idToFind));
    }

    private void ClearReport()
    {
        reportRows.Clear();
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        if(dotNetRef != null)
        {
            dotNetRef.Dispose();
        }
        return ValueTask.CompletedTask;
    }
}