@page "/"
@using DragAndDrop.Models
@using DragAndDrop.Shared
@using DragAndDrop.Utils
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Blazor Drag & Drop Report Builder</PageTitle>

<div class="report-builder-container">
    <!-- Paleta de Herramientas (Ahora dinámica) -->
    <div class="toolbox">
        <h4>Herramientas</h4>
        @foreach(var vizType in Enum.GetValues<VisualizationType>())
        {
            <div id="tool-@vizType"
                 class="tool-item"
                 @ref="toolElements[vizType]"
                 style="background-color: @ColorHelper.GetColorForVisualization(vizType, 0.1); border: 1px solid @ColorHelper.GetColorForVisualization(vizType);">
                @vizType.ToString()
            </div>
        }
        <hr />
        <button class="btn btn-danger mt-3 w-100" @onclick="ClearReport">Limpiar Reporte</button>
    </div>

    <!-- Lienzo del Reporte -->
    <div class="report-canvas-wrapper">
        <div id="main-canvas" class="report-canvas drop-zone" @ref="dropZoneElement">
            @if(!reportRows.Any())
            {
                <div class="empty-canvas-message">Arrastra una herramienta aquí para comenzar</div>
            }
            @foreach(var row in reportRows)
            {
                <ReportItemView Item="row" OnDeleteItemRequest="HandleDeleteItem" />
            }
        </div>
    </div>
</div>

@code {
    private List<TemplateExecutionModel> reportRows = new();
    private DotNetObjectReference<Home>? dotNetRef;

    // Diccionario para mantener las referencias a los elementos de la paleta
    private Dictionary<VisualizationType, ElementReference> toolElements = new();
    private ElementReference dropZoneElement;

    protected override void OnInitialized()
    {
        // Inicializar el diccionario para que @ref funcione en el bucle
        foreach(var vizType in Enum.GetValues<VisualizationType>().Where(v => v != VisualizationType.Empty))
        {
            toolElements[vizType] = new ElementReference();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("blazorDragDrop.setDotNetHelper", dotNetRef);

            // Hacer que cada herramienta sea arrastrable
            foreach(var (vizType, element) in toolElements)
            {
                var dragData = new { Type = vizType.ToString() };
                await JSRuntime.InvokeVoidAsync("makeDraggable", element, dragData);
            }

            await JSRuntime.InvokeVoidAsync("makeDropZone", dropZoneElement);
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void HandleDrop(object droppedData, string targetId)
    {
        var data = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(droppedData.ToString());
        var vizTypeString = data["type"];
        Enum.TryParse(vizTypeString, out VisualizationType vizType);

        if(targetId == "main-canvas")
        {
            var newRow = new TemplateExecutionModel { Visualization = VisualizationType.Empty, Name = "Nueva Fila" };
            var newCol = new TemplateExecutionModel { Visualization = vizType, Name = vizType.ToString() };
            newRow.Items.Add(newCol);
            reportRows.Add(newRow);
        }
        else
        {
            var targetItem = FindItemById(Guid.Parse(targetId));
            if(targetItem != null)
            {
                if(targetItem.Visualization == VisualizationType.Empty)
                {
                    var newCol = new TemplateExecutionModel { Visualization = vizType, Name = vizType.ToString() };
                    targetItem.Items.Add(newCol);
                }
                else
                {
                    var parent = targetItem.Parent;
                    if(parent != null)
                    {
                        var newSubRow = new TemplateExecutionModel { Visualization = VisualizationType.Empty, Name = "Fila anidada" };
                        var oldItemAsNewColumn = new TemplateExecutionModel
                        {
                            Visualization = targetItem.Visualization,
                            Name = targetItem.Name,
                            Items = targetItem.Items
                        };
                        newSubRow.Items.Add(oldItemAsNewColumn);

                        var newItemAsNewColumn = new TemplateExecutionModel { Visualization = vizType, Name = vizType.ToString() };
                        newSubRow.Items.Add(newItemAsNewColumn);

                        var index = parent.Items.IndexOf(targetItem);
                        if(index != -1)
                        {
                            parent.Items[index] = newSubRow;
                        }
                    }
                }
            }
        }
        StateHasChanged();
    }

    // Método para manejar la solicitud de eliminación
    private void HandleDeleteItem(Guid itemId)
    {
        var rowToRemove = reportRows.FirstOrDefault(r => r.UniqueId == itemId);
        if(rowToRemove != null)
        {
            reportRows.Remove(rowToRemove);
        }
        else
        {
            var itemToDelete = FindItemById(itemId);
            if(itemToDelete?.Parent != null)
            {
                itemToDelete.Parent.Items.Remove(itemToDelete);
                // Si el padre es una fila y se queda sin hijos, lo eliminamos también.
                if(itemToDelete.Parent.Visualization == VisualizationType.Empty && !itemToDelete.Parent.HasChilds)
                {
                    HandleDeleteItem(itemToDelete.Parent.UniqueId);
                }
            }
        }
        StateHasChanged();
    }

    private TemplateExecutionModel? FindItemById(Guid id)
    {
        foreach(var row in reportRows)
        {
            var found = FindInNode(row, id);
            if(found != null)
                return found;
        }
        return null;
    }

    private TemplateExecutionModel? FindInNode(TemplateExecutionModel node, Guid id)
    {
        if(node.UniqueId == id)
            return node;
        foreach(var child in node.Items)
        {
            var found = FindInNode(child, id);
            if(found != null)
                return found;
        }
        return null;
    }

    private void ClearReport()
    {
        reportRows.Clear();
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        if(dotNetRef != null)
        {
            dotNetRef.Dispose();
        }
        return ValueTask.CompletedTask;
    }
}